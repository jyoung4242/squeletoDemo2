{
  "version": 3,
  "sources": ["../../@peasy-lib/peasy-assets/src/assets.ts"],
  "sourcesContent": ["export interface IAssets {\n  src?: string;\n}\n\nexport interface IAsset {\n  src?: string;\n  name?: string;\n  family?: string;\n  descriptors?: any;\n  type?: 'image' | 'audio' | 'font';\n}\n\nexport class Assets {\n  private static initialized = false;\n  public static sources: Record<string, string> = { default: '/assets/' };\n  public static assets: { image: Record<string, HTMLImageElement>; audio: Record<string, HTMLMediaElement>; font: Record<string, FontFace> } = {\n    image: {},\n    audio: {},\n    font: {},\n  };\n  public static requested = 0;\n  public static loaded = 0;\n\n  public static types: Record<string, string> = {\n    image: 'image',\n    audio: 'audio',\n\n    png: 'image',\n    svg: 'image',\n    jpg: 'image',\n    jpeg: 'image',\n    gif: 'image',\n\n    mp3: 'audio',\n    wav: 'audio',\n  };\n\n  public static loaders: Record<string, any> = {\n    image: Assets.loadImage,\n    audio: Assets.loadAudio,\n    font: Assets.loadFont,\n  };\n\n  public static get pending(): number {\n    return this.requested - this.loaded;\n  }\n\n  public static initialize(input: IAssets = {}) {\n    Assets.initialized = true;\n    if (input.src != null) {\n      Assets.sources.default = input.src;\n    }\n  }\n\n  public static load(assets: (string | IAsset)[]): Promise<any[]> {\n    return Promise.all(assets.map(async (asset) => {\n      if (typeof asset === 'string') {\n        asset = { src: asset };\n      }\n      const src = !(asset.src ?? '').startsWith('data:') ? `${Assets.sources.default}${asset.src ?? ''}` : asset.src ?? '';\n      const type = asset.family != null ? 'font'\n        : (src.startsWith('data:')\n          ? src.slice('data:'.length, src.indexOf('/'))\n          : Assets.types[asset.type ?? src.split('.').pop() ?? '']\n        ) as 'image' | 'audio';\n      const loader = Assets.loaders[type];\n      if (loader == null) {\n        return null;\n      }\n      let name = asset.name;\n      if (name == null) {\n        if (type === 'font') {\n          name = asset.family!;\n        } else {\n          name = src.split('/').pop() ?? '';\n          const parts = name.split('.');\n          parts.pop();\n          name = parts.join('.');\n        }\n      }\n      Assets.requested++;\n      let promise;\n      if ((src as unknown as typeof Image) instanceof Image) {\n        promise = Promise.resolve(src);\n      } else {\n        promise = loader(src, asset);\n      }\n      Assets.assets[type][name] = await promise;\n      Assets.loaded++;\n      return promise;\n    }));\n  }\n\n  public static clear(): Promise<void> {\n    Assets.assets = {\n      image: {},\n      audio: {},\n      font: {},\n    };\n    Assets.requested = 0;\n    Assets.loaded = 0;\n    // TODO: Make a proper promise that first makes sure nothing is pending\n    return Promise.resolve();\n  }\n\n  public static image(name: string): HTMLImageElement {\n    return Assets.assets.image[name];\n  }\n  public static audio(name: string): HTMLMediaElement {\n    return Assets.assets.audio[name];\n  }\n  public static font(name: string): FontFace {\n    return Assets.assets.font[name];\n  }\n\n  public static loadImage(src: string): Promise<HTMLImageElement> {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n    return new Promise(async (resolve) => {\n      const img = new Image();\n      img.onprogress = (...args) => console.log('progress', args);\n      img.onload = () => resolve(img);\n      // img.src = url;\n      if (src.startsWith('data:')) {\n        img.src = src;\n      } else {\n        img.src = await fetch(src).then(res => res.url);\n      }\n    });\n  }\n\n  public static loadAudio(url: string): Promise<HTMLMediaElement> {\n    return new Promise(resolve => {\n      const audio = new Audio();\n      audio.addEventListener('progress', (...args) => console.log('progress', args));\n      audio.oncanplaythrough = () => resolve(audio);\n      audio.src = url;\n    });\n  }\n\n  public static loadFont(url: string, asset: IAsset): Promise<FontFace> {\n    if (!url.startsWith('url(')) {\n      url = `url(${url})`;\n    }\n    return new Promise(async (resolve) => {\n      const font = new FontFace(asset.family!, url, asset.descriptors ?? {});\n      await font.load();\n      document.fonts.add(font);\n      resolve(font);\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
